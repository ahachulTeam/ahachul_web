name: Build & Deploy Ahhachul Web

on:
  push:
    branches:
      - main
    paths:
      - 'services/next.ahhachul.com/**'

env:
  DEFAULT_NODE_VERSION: '20.14.0'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Install dependencies
        uses: ./.github/actions/yarn-install

      - name: Create .env file for next.ahhachul.com
        run: |
          echo "${{ secrets.NEXT_APP_DEV_CONFIG }}" > "services/next.ahhachul.com/.env"

      - name: Build next.ahhachul.com
        run: yarn build:web

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Get the latest Task Definition ARN
        id: task_definition
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }} \
            --query 'services[0].taskDefinition' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate appspec.yaml
        run: |
          cat <<EOF > ./appspec.yaml
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "app-container"
                    ContainerPort: 3000
                  CapacityProviderStrategy:
                  - CapacityProvider: "FARGATE_SPOT"
                    Base: 0
                    Weight: 1
          EOF
    
      - name: Create Codedeploy deployment
        run: |
          APPSPEC_CONTENT=$(cat appspec.yaml | jq -sR .)
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":$APPSPEC_CONTENT}}"