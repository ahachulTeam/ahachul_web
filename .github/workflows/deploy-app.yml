name: Build & Deploy Ahhachul App

on:
  push:
    branches:
      - feat/sign-in
    # paths:
    #   - 'services/ahhachul.com/**'

env:
  DEFAULT_NODE_VERSION: '20.14.0'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Install dependencies
        uses: ./.github/actions/yarn-install

      - name: Create .env file for ahhachul.com
        run: |
          echo '${{ secrets.REACT_APP_DEV_CONFIG }}' > config.json
          cat config.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> services/ahhachul.com/.env.production

      - name: Build only affected packages
        run: yarn affected:build --parallel=5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Remove Existing Files & Upload New to S3
        run: |
          aws s3 rm s3://${{ secrets.S3_BUCKET_NAME }} --recursive
          aws s3 cp services/ahhachul.com/build s3://${{ secrets.S3_BUCKET_NAME }} --recursive

      - name: Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_USER }} --paths "/*"

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build Docker image
        run: |
          docker build -f services/next.ahhachul.com/Dockerfile -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Deploy Application
        run: aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.DEV_ECS_APP_SERVICE_NAME }} --force-new-deployment
