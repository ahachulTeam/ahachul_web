name: Deploy Admin and User to S3

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies with Yarn
        run: yarn install

      - name: Build packages with Yarn
        run: yarn build:all

      - name: Create .env file for ahhachul.com
        run: |
          echo '${{ secrets.REACT_APP_DEV_CONFIG }}' > config.json
          cat config.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> services/ahhachul.com/.env

      - name: Build ahhachul.com
        run: yarn workspace ahhachul.com build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Remove Existing Files & Upload New to S3
        run: |
          aws s3 rm s3://${{ secrets.S3_BUCKET_NAME }} --recursive
          aws s3 cp services/ahhachul.com/build s3://${{ secrets.S3_BUCKET_NAME }} --recursive

      - name: Invalidate CloudFront for ahhachul.com
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_USER }} --paths "/*"

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build Docker image
        run: |
          docker build -f services/next.ahhachul.com/Dockerfile -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Get the latest Task Definition ARN
        id: task_definition
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }} \
            --query 'services[0].taskDefinition' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate appspec.yaml
        run: |
          cat <<EOF > ./appspec.yaml
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "app-container"
                    ContainerPort: 3000
          EOF

      - name: Deploy Application
        run: |
          APPSPEC_CONTENT=$(cat appspec.yaml | jq -sR .)
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":$APPSPEC_CONTENT}}"